============================
Code Grader API Endpoints (2025)
============================

Base URL: http://localhost:8000/api/evaluation/

---------------------------------------------
1. Health Check
---------------------------------------------
GET /health/

- Description: Check if the API is running.
- Response Example:
  {
    "status": "healthy",
    "timestamp": "2025-06-21T16:10:23.832896+00:00"
  }

---------------------------------------------
2. Create Lab Rubric
---------------------------------------------
POST /create-rubric/

- Description: Create a new rubric for a lab (lab + semester + year + section must be unique).
- Request JSON Example:
  {
    "lab": "Lab3",
    "semester": "fall",
    "year": "2025",
    "section": "1321l",
    "rubrics": {
      "Lab3A.py": {
        "variable_initialization": {"points": 4, "description": "All variables are initialized before use"},
        "input_prompt": {"points": 4, "description": "Prompts for amount owed and APR with clear messages"},
        "input_type": {"points": 4, "description": "Correctly uses int and float for inputs"},
        "calculation_monthly_rate": {"points": 7, "description": "Correctly calculates monthly percentage rate"},
        "calculation_min_payment": {"points": 7, "description": "Correctly calculates minimum payment"},
        "output_monthly_rate": {"points": 3, "description": "Prints monthly percentage rate with correct rounding"},
        "output_min_payment": {"points": 3, "description": "Prints minimum payment with correct rounding and $ sign"},
        "variable_naming": {"points": 1, "description": "Uses clear and appropriate variable names"},
        "formatting": {"points": 1, "description": "Code is neatly formatted and readable"},
        "comments": {"points": 1, "description": "Includes helpful comments if needed"}
      },
      "Lab3B.py": {
        "variable_initialization": {"points": 4, "description": "All variables are initialized before use"},
        "input_prompts": {"points": 4, "description": "Prompts for all course hours and grades with clear messages"},
        "input_type": {"points": 4, "description": "Correctly uses int for all inputs"},
        "calculation_total_hours": {"points": 4, "description": "Correctly calculates total hours"},
        "calculation_quality_points": {"points": 7, "description": "Correctly calculates total quality points"},
        "calculation_gpa": {"points": 7, "description": "Correctly calculates GPA"},
        "output_total_hours": {"points": 2, "description": "Prints total hours in correct format"},
        "output_quality_points": {"points": 2, "description": "Prints total quality points in correct format"},
        "output_gpa": {"points": 3, "description": "Prints GPA rounded to 2 decimals"},
        "variable_naming": {"points": 1, "description": "Uses clear and appropriate variable names"},
        "formatting": {"points": 1, "description": "Code is neatly formatted and readable"},
        "comments": {"points": 1, "description": "Includes helpful comments if needed"}
      },
      "Lab3C.py": {
        "variable_initialization": {"points": 3, "description": "All variables are initialized before use"},
        "input_prompts": {"points": 3, "description": "Prompts for all sandwich sizes with clear messages"},
        "input_type": {"points": 3, "description": "Correctly uses int for all inputs"},
        "calculation_cooking_time": {"points": 7, "description": "Correctly calculates total cooking time in seconds"},
        "conversion_minutes_seconds": {"points": 6, "description": "Correctly converts total time to minutes and seconds"},
        "output_sandwich_counts": {"points": 2, "description": "Prints entered sandwich counts in correct format"},
        "output_total_time": {"points": 3, "description": "Prints total cooking time in correct format"},
        "variable_naming": {"points": 1, "description": "Uses clear and appropriate variable names"},
        "formatting": {"points": 1, "description": "Code is neatly formatted and readable"},
        "comments": {"points": 1, "description": "Includes helpful comments if needed"}
      }
    }
  }
- Response Example (success):
  {
    "message": "Rubric created successfully",
    "rubric_id": 1
  }
- Response Example (error):
  {
    "error": "Failed to create rubric",
    "details": "UNIQUE constraint failed: evaluation_labrubric.lab_name, evaluation_labrubric.semester, evaluation_labrubric.section"
  }

---------------------------------------------
3. Get Rubric ID
---------------------------------------------
POST /get-rubric-id/

- Description: Get the rubric ID for a specific lab, semester, year, and section.
- Request JSON Example:
  {
    "lab": "Lab3",
    "semester": "fall",
    "year": "2025",
    "section": "1321l"
  }
- Response Example:
  {
    "rubric_id": 1,
    "lab_name": "Lab3",
    "total_points": 100
  }
- Response Example (not found):
  {
    "error": "Rubric not found"
  }

---------------------------------------------
4. Evaluate Submission
---------------------------------------------
POST /evaluate/

- Description: Evaluate a student's code submission using a specific rubric ID.
- Request JSON Example:
  {
    "student_id": "12345",
    "name": "Zachery James Moon Jr.",
    "section": "1321l",
    "semester": "fall 2025",
    "instructor_name": "Raja Yeswanth Nalamati",
    "lab_name": "Lab3",
    "rubric_id": 1,
    "input": "Lab3A.py\nDownload\n# Class: CSE 1321L\n# Section: 14\n# Term: Spring 2025\n# Instructor: Raja Yeswanth Nalamati\n# Name: Zachery James Moon Jr.\n# Lab: 3\n\namount_owed = int(input(\"Amount owed: $\"))\napr = float(input(\"APR: \"))\nmonthly_percentage_rate = apr/12\nminimum_payment = amount_owed * (monthly_percentage_rate/100)\nprint(f\"Monthly percentage rate: {round(monthly_percentage_rate, 3)}\")\nprint(f\"Minimum payment: ${round(minimum_payment, 2)}\")\n\nLab3B.py\nDownload\n# Class: CSE 1321L\n# Section: 14\n# Term: Spring 2025\n# Instructor: Raja Yeswanth Nalamati\n# Name: Zachery James Moon Jr.\n# Lab: 3\n\ncourse_one_hours = int(input(\"Course 1 hours: \"))\ncourse_one_grade = int(input(\"Grade for course 1: \"))\ncourse_two_hours = int(input(\"Course 2 hours: \"))\ncourse_two_grade = int(input(\"Grade for course 2: \"))\ncourse_three_hours = int(input(\"Course 3 hours: \"))\ncourse_three_grade = int(input(\"Grade for course 3: \"))\ncourse_four_hours = int(input(\"Course 4 hours: \"))\ncourse_four_grade = int(input(\"Grade for course 4: \"))\ntotal_hours = course_one_hours + course_two_hours + course_three_hours + course_four_hours\ntotal_quality_points = course_one_grade*course_one_hours + course_two_grade*course_two_hours + course_three_grade*course_three_hours + course_four_grade*course_four_hours\ngpa = total_quality_points / total_hours\nprint(f\"Total hours: {total_hours}\")\nprint(f\"Total quality points: {total_quality_points}\")\nprint(f\"Your GPA for this semester is {round(gpa, 2)}\")\n\nLab3C.py\nDownload\n# Class: CSE 1321L\n# Section: 14\n# Term: Spring 2025\n# Instructor: Raja Yeswanth Nalamati\n# Name: Zachery James Moon Jr.\n# Lab: 3\n\nsmall_sandwiches = int(input(\"Enter the number of small sandwiches: \"))\nmedium_sandwiches = int(input(\"Enter the number of medium sandwiches: \"))\nlarge_sandwiches = int(input(\"Enter the number of large sandwiches: \"))\nextra_large_sandwiches = int(input(\"Enter the number of extra-large sandwiches: \"))\nprint(\"\")\nprint(f\"You've entered {small_sandwiches} small sandwiches.\")\nprint(f\"You've entered {medium_sandwiches} medium sandwiches.\")\nprint(f\"You've entered {large_sandwiches} large sandwiches.\")\nprint(f\"You've entered {extra_large_sandwiches} extra-large sandwiches.\")\nprint(\"\")\ncooking_time = (small_sandwiches*30) + (medium_sandwiches*60) + (large_sandwiches*75) + (extra_large_sandwiches*135)\ncooking_time_minutes = cooking_time // 60\ncooking_time_seconds = cooking_time % 60\nprint(f\"Total cooking time is {cooking_time_minutes} minutes and {cooking_time_seconds} seconds.\")"
  }
- Response Example (success):
  {
    "session_id": "<uuid>",
    "feedback": "Lab3A.py: correct\n\nLab3B.py: correct\n\nLab3C.py: correct",
    "summary": "Evaluated 3 files. Total points lost: 0",
    "total_files_evaluated": 3,
    "total_points_lost": 0,
    "total_evaluation_time_seconds": 4.2
  }
- Response Example (error):
  {
    "error": "Evaluation failed",
    "details": "<error message>"
  }

---------------------------------------------
5. Get All Rubrics
---------------------------------------------
GET /rubrics/

- Description: List all active rubrics.
- Response Example:
  {
    "rubrics": [
      {
        "id": 1,
        "lab_name": "Lab3",
        "semester": "fall 2025",
        "section": "1321l",
        "total_points": 100,
        "criteria": { ... },
        "is_active": true,
        "created_at": "2025-06-21T16:10:23.835291Z"
      }
    ],
    "count": 1
  }

---------------------------------------------
API Workflow
---------------------------------------------
1. Create a rubric using POST /create-rubric/ with lab, semester, year, section, and rubrics criteria
2. Get the rubric_id using POST /get-rubric-id/ with lab, semester, year, section
3. Use the rubric_id in POST /evaluate/ to grade student submissions
4. The API will apply the specific rubric to all files in the submission

---------------------------------------------
Notes
---------------------------------------------
- All endpoints accept and return JSON.
- For evaluation, the input should be a single string with all code files, separated by filename and 'Download' markers.
- Rubric creation requires unique (lab, semester, year, section) per rubric.
- Total points are automatically calculated from the rubrics criteria.
- The rubric_id is REQUIRED for evaluation to specify which rubric to use.
- All error responses have an 'error' field and may include 'details'.
- No legacy or deprecated endpoints are present in this version.

================================================================================
                    CODE GRADER API ENDPOINTS DOCUMENTATION
================================================================================

================================================================================
1. EVALUATION ENDPOINTS
================================================================================

1.1 EVALUATE SUBMISSION (Main Endpoint)
----------------------------------------
URL: POST /api/evaluation/evaluate/
Description: Evaluate a student submission with comprehensive validation

Required Fields:
- student_id (string): 3-20 characters, alphanumeric with hyphens/underscores only
- name (string): 2-100 characters, letters, spaces, dots, hyphens, apostrophes only
- section (string): 1-10 alphanumeric characters
- term (string): Format "Spring 2025", "Fall 2024", "Summer 2024", "Winter 2024"
- instructor_name (string): 2-100 characters, letters, spaces, dots, hyphens, apostrophes only
- lab_name (string): 1-50 characters, alphanumeric, spaces, hyphens, underscores only
- input (string): 10-50,000 characters, must contain "Download" keyword and ".py" files

Optional Fields:
- submission_metadata (object): Additional metadata about the submission

Example Request:
{
    "student_id": "STU123456",
    "name": "John Doe",
    "section": "CS101",
    "term": "Spring 2025",
    "instructor_name": "Dr. Smith",
    "lab_name": "Lab 1 - Python Basics",
    "input": "Download main.py\nprint('Hello World')\ndef calculate_sum(a, b):\n    return a + b\n\nDownload helper.py\ndef helper():\n    return 'Helper function'",
    "submission_metadata": {
        "submission_time": "2025-06-21T15:30:00Z",
        "platform": "web"
    }
}

Example Success Response:
{
    "status": "success",
    "message": "Evaluation completed successfully",
    "data": {
        "session_id": "uuid-string",
        "feedback": {
            "main.py": "1. Missing function docstring (-5 points)\n2. No error handling (-10 points)",
            "helper.py": "No deductions - Perfect score!"
        },
        "summary": "Alex performed well in Lab1, demonstrating excellent function design and implementation. However, struggles with recursive function implementation. Overall good work with room for improvement.",
        "total_files_evaluated": 2,
        "successful_evaluations": 2,
        "error_evaluations": 0,
        "total_points_lost": 15,
        "total_evaluation_time_seconds": 2.5,
        "total_tokens_used": 1250
    }
}

Example Error Response (Missing Fields):
{
    "status": "error",
    "message": "Missing required fields",
    "errors": [
        "Missing required field: student_id",
        "Missing required field: lab_name"
    ],
    "missing_entities": ["student_id", "lab_name"]
}

Example Error Response (Validation Error):
{
    "status": "error",
    "message": "Validation failed",
    "errors": [
        "student_id must be 3-20 characters, alphanumeric with hyphens/underscores only",
        "term must be in format: 'Spring 2025', 'Fall 2024', etc."
    ],
    "missing_entities": ["valid_student_id", "valid_term"]
}

1.2 LEGACY EVALUATE (Backward Compatibility)
---------------------------------------------
URL: POST /api/evaluation/legacy-evaluate/
Description: Legacy endpoint for backward compatibility with old format

Required Fields:
- input (string): The code input text

Optional Fields:
- student_id (string): Student identifier
- name (string): Student name
- section (string): Class section
- term (string): Academic term
- instructor_name (string): Instructor name
- lab_name (string): Lab name
- metadata (object): Additional metadata

Example Request:
{
    "input": "Download main.py\nprint('Hello World')",
    "student_id": "STU123456",
    "lab_name": "Lab 1"
}

Example Response: Same format as main evaluation endpoint

================================================================================
2. RUBRIC MANAGEMENT ENDPOINTS
================================================================================

2.1 CREATE RUBRIC
-----------------
URL: POST /api/evaluation/rubrics/create/
Description: Create a new rubric for code evaluation

Required Fields:
- name (string): Rubric name (non-empty)
- filename (string): Python filename ending in .py
- total_points (integer): Positive integer for total possible points
- criteria (object): Evaluation criteria structure

Example Request:
{
    "name": "Python Basics Rubric",
    "filename": "main.py",
    "total_points": 100,
    "criteria": {
        "syntax": {
            "points": 20,
            "description": "Correct Python syntax"
        },
        "logic": {
            "points": 30,
            "description": "Correct program logic"
        },
        "documentation": {
            "points": 15,
            "description": "Proper code documentation"
        },
        "style": {
            "points": 10,
            "description": "Code style and formatting"
        },
        "testing": {
            "points": 25,
            "description": "Test cases and edge cases"
        }
    }
}

Example Success Response:
{
    "status": "success",
    "message": "Rubric created successfully",
    "data": {
        "id": 1,
        "name": "Python Basics Rubric",
        "filename": "main.py",
        "total_points": 100,
        "criteria": {...},
        "is_active": true,
        "created_at": "2025-06-21T15:30:00Z",
        "updated_at": "2025-06-21T15:30:00Z"
    }
}

2.2 GET ALL RUBRICS (WITH PAGINATION)
-------------------------------------
URL: GET /api/evaluation/rubrics/
Description: Retrieve all active rubrics with pagination support

Query Parameters:
- page (integer, optional): Page number (default: 1, min: 1)
- page_size (integer, optional): Items per page (default: 10, min: 1, max: 100)

Example: GET /api/evaluation/rubrics/?page=1&page_size=5

Example Response:
{
    "status": "success",
    "message": "Retrieved 5 rubrics",
    "data": {
        "rubrics": [
            {
                "id": 1,
                "name": "Lab1 - Basic Variables and Input/Output",
                "filename": "Lab1A.py",
                "total_points": 25,
                "criteria": {
                    "variable_declaration": {"points": 5, "description": "Properly declares variables with appropriate types"},
                    "input_handling": {"points": 5, "description": "Correctly handles user input with proper prompts"},
                    "basic_calculations": {"points": 8, "description": "Performs basic arithmetic operations correctly"},
                    "output_formatting": {"points": 4, "description": "Formats output according to specifications"},
                    "code_structure": {"points": 3, "description": "Code is well-structured and readable"}
                },
                "is_active": true,
                "created_at": "2025-06-21T15:30:00Z"
            },
            {
                "id": 2,
                "name": "Lab2 - Arrays and Lists",
                "filename": "Lab2A.py",
                "total_points": 22,
                "criteria": {
                    "array_initialization": {"points": 4, "description": "Properly initializes arrays/lists"},
                    "array_operations": {"points": 6, "description": "Correctly performs array operations"},
                    "loop_implementation": {"points": 5, "description": "Uses loops to process arrays"},
                    "array_indexing": {"points": 4, "description": "Correctly accesses array elements"},
                    "output_validation": {"points": 3, "description": "Validates and displays array results"}
                },
                "is_active": true,
                "created_at": "2025-06-21T15:30:00Z"
            }
        ],
        "pagination": {
            "current_page": 1,
            "page_size": 5,
            "total_count": 10,
            "total_pages": 2,
            "has_next": true,
            "has_previous": false,
            "next_page": 2,
            "previous_page": null
        }
    }
}

Available Rubric Topics:
- Lab1: Basic Variables and Input/Output (25 points)
- Lab2: Arrays and Lists (22 points)
- Lab3: Functions and Methods (21 points)
- Lab4: Object-Oriented Programming (24 points)
- Lab5: File Handling and I/O (22 points)
- Lab6: Data Structures (24 points)
- Lab7: Graph Algorithms (28 points)
- Lab8: Dynamic Programming (25 points)
- Lab9: Advanced Algorithms (28 points)
- Lab10: System Programming (26 points)

2.3 GET RUBRIC BY FILENAME
--------------------------
URL: GET /api/evaluation/rubrics/{filename}/
Description: Get a specific rubric by filename

Path Parameters:
- filename (string): Python filename (must end with .py)

Example: GET /api/evaluation/rubrics/main.py/

Example Success Response:
{
    "status": "success",
    "message": "Rubric retrieved successfully",
    "data": {
        "id": 1,
        "name": "Python Basics Rubric",
        "filename": "main.py",
        "total_points": 100,
        "criteria": {...},
        "is_active": true
    }
}

Example Error Response (Not Found):
{
    "status": "error",
    "message": "Rubric not found",
    "errors": ["No rubric found for filename: main.py"],
    "missing_entities": ["rubric"]
}

2.4 UPDATE RUBRIC
-----------------
URL: PUT /api/evaluation/rubrics/update/{rubric_id}/
Description: Update an existing rubric

Path Parameters:
- rubric_id (integer): Rubric ID to update

Request Body: Same fields as create rubric (all optional for update)

Example Request:
{
    "name": "Updated Python Basics Rubric",
    "total_points": 120
}

Example Success Response:
{
    "status": "success",
    "message": "Rubric updated successfully",
    "data": {
        "id": 1,
        "name": "Updated Python Basics Rubric",
        "filename": "main.py",
        "total_points": 120,
        "criteria": {...},
        "is_active": true
    }
}

================================================================================
3. ANALYTICS AND STUDENT MANAGEMENT ENDPOINTS
================================================================================

3.1 GET ALL LABS
----------------
URL: GET /api/analytics/labs/
Description: Get all labs with basic information and statistics

Example: GET /api/analytics/labs/

Example Response:
{
    "labs": [
        {
            "id": 1,
            "lab_name": "Lab1",
            "semester": "Spring 2025",
            "section": "14",
            "total_points": 25,
            "is_active": true,
            "total_evaluations": 45,
            "average_points_lost": 3.2,
            "created_at": "2025-01-15T10:30:00Z",
            "updated_at": "2025-06-21T15:30:00Z"
        },
        {
            "id": 2,
            "lab_name": "Lab2",
            "semester": "Spring 2025",
            "section": "14",
            "total_points": 22,
            "is_active": true,
            "total_evaluations": 38,
            "average_points_lost": 4.1,
            "created_at": "2025-01-20T14:30:00Z",
            "updated_at": "2025-06-21T16:30:00Z"
        }
    ],
    "count": 2
}

3.2 GET LAB BY ID
-----------------
URL: GET /api/analytics/lab/{lab_id}/
Description: Get detailed information about a specific lab by ID

Path Parameters:
- lab_id (integer): Lab ID

Example: GET /api/analytics/lab/1/

Example Response:
{
    "id": 1,
    "lab_name": "Lab1",
    "semester": "Spring 2025",
    "section": "14",
    "total_points": 25,
    "criteria": {
        "variable_declaration": {"points": 5, "description": "Properly declares variables"},
        "input_handling": {"points": 5, "description": "Correctly handles user input"},
        "basic_calculations": {"points": 8, "description": "Performs basic arithmetic operations"},
        "output_formatting": {"points": 4, "description": "Formats output according to specifications"},
        "code_structure": {"points": 3, "description": "Code is well-structured and readable"}
    },
    "is_active": true,
    "total_evaluations": 45,
    "total_sessions": 45,
    "average_points_lost": 3.2,
    "section_breakdown": [
        {
            "student__section": "14",
            "count": 45,
            "avg_points": 3.2
        }
    ],
    "semester_breakdown": [
        {
            "student__semester": "Spring 2025",
            "count": 45,
            "avg_points": 3.2
        }
    ],
    "recent_evaluations": [
        {
            "student_id": "STU100001",
            "student_name": "Alex Johnson",
            "points_lost": 5,
            "status": "completed",
            "date": "2025-06-21T15:30:00Z"
        }
    ],
    "created_at": "2025-01-15T10:30:00Z",
    "updated_at": "2025-06-21T15:30:00Z"
}

Example Error Response (Lab Not Found):
{
    "error": "Lab not found"
}

3.3 GET ALL STUDENTS (WITH PAGINATION)
--------------------------------------
URL: GET /api/analytics/students/
Description: Get all students with pagination support

Query Parameters:
- page (integer, optional): Page number (default: 1, min: 1)
- page_size (integer, optional): Items per page (default: 20, min: 1, max: 100)

Example: GET /api/analytics/students/?page=1&page_size=10

Example Response:
{
    "students": [
        {
            "student_id": "STU100001",
            "name": "Alex Johnson",
            "section": "14",
            "semester": "Spring 2025",
            "instructor_name": "Dr. Raja Yeswanth Nalamati",
            "created_at": "2025-06-21T15:30:00Z"
        },
        {
            "student_id": "STU100002",
            "name": "Jordan Smith",
            "section": "15",
            "semester": "Fall 2024",
            "instructor_name": "Dr. Sarah Johnson",
            "created_at": "2025-06-21T15:30:00Z"
        }
    ],
    "pagination": {
        "current_page": 1,
        "page_size": 10,
        "total_count": 1200,
        "total_pages": 120,
        "has_next": true,
        "has_previous": false,
        "next_page": 2,
        "previous_page": null
    }
}

3.4 GET STUDENT PERFORMANCE SUMMARY
-----------------------------------
URL: GET /api/analytics/student/{student_id}/performance/
Description: Get comprehensive performance summary for a specific student

Path Parameters:
- student_id (string): Student identifier

Example: GET /api/analytics/student/STU100001/performance/

Example Response:
{
    "student_id": "STU100001",
    "name": "Alex Johnson",
    "section": "14",
    "semester": "Spring 2025",
    "instructor_name": "Dr. Raja Yeswanth Nalamati",
    "total_evaluations": 15,
    "total_points_lost": 45,
    "average_points_lost": 3.0,
    "lab_breakdown": [
        {
            "lab_name": "Lab1",
            "count": 3,
            "avg_points": 2.5,
            "total_points": 7.5
        },
        {
            "lab_name": "Lab2",
            "count": 2,
            "avg_points": 4.0,
            "total_points": 8.0
        }
    ],
    "recent_evaluations": [
        {
            "lab_name": "Lab2",
            "points_lost": 5,
            "date": "2025-06-21T15:30:00Z"
        }
    ],
    "performance_summary": "Alex shows excellent array manipulation skills but struggles with recursive function implementation. Overall good progress with room for improvement in advanced concepts.",
    "first_evaluation": "2025-01-15T10:30:00Z",
    "last_evaluation": "2025-06-21T15:30:00Z"
}

3.5 GET SUMMARIZED PERFORMANCE BY LAB
-------------------------------------
URL: GET /api/analytics/performance/lab/{lab_name}/
Description: Get summarized performance for a specific lab with optional filters

Path Parameters:
- lab_name (string): Lab name (e.g., "Lab1", "Lab2")

Query Parameters:
- section (string, optional): Filter by section
- semester (string, optional): Filter by semester

Example: GET /api/analytics/performance/lab/Lab2/?section=14&semester=Spring%202025

Example Response:
{
    "lab_name": "Lab2",
    "section": "14",
    "semester": "Spring 2025",
    "total_sessions": 45,
    "total_points_lost": 180,
    "average_points_lost": 4.0,
    "section_breakdown": [],
    "semester_breakdown": [],
    "performance_summary": "Students in Lab2 demonstrate strong array manipulation skills but struggle with array boundary conditions. Many students show good understanding of loop structures but need improvement in handling edge cases."
}

Token Limit Response (if exceeded):
{
    "lab_name": "Lab2",
    "section": "14",
    "semester": "Spring 2025",
    "total_sessions": 150,
    "total_points_lost": 600,
    "average_points_lost": 4.0,
    "section_breakdown": [],
    "semester_breakdown": [],
    "performance_summary": "MAX_LIMIT_EXCEEDED: Too much data to analyze. Please use more specific filters."
}

3.6 GET SUMMARIZED PERFORMANCE BY SECTION
-----------------------------------------
URL: GET /api/analytics/performance/section/{section}/
Description: Get summarized performance for a specific section with optional filters

Path Parameters:
- section (string): Section identifier (e.g., "14", "15")

Query Parameters:
- lab_name (string, optional): Filter by lab name
- semester (string, optional): Filter by semester

Example: GET /api/analytics/performance/section/14/?lab_name=Lab2&semester=Spring%202025

Example Response:
{
    "section": "14",
    "lab_name": "Lab2",
    "semester": "Spring 2025",
    "total_sessions": 45,
    "total_points_lost": 180,
    "average_points_lost": 4.0,
    "lab_breakdown": [],
    "semester_breakdown": [],
    "performance_summary": "Section 14 students show excellent progress in array operations and loop implementation. However, many struggle with complex nested loops and array boundary conditions."
}

3.7 GET SUMMARIZED PERFORMANCE BY SEMESTER
------------------------------------------
URL: GET /api/analytics/performance/semester/{semester}/
Description: Get summarized performance for a specific semester with optional filters

Path Parameters:
- semester (string): Semester name (e.g., "Spring 2025", "Fall 2024")

Query Parameters:
- lab_name (string, optional): Filter by lab name
- section (string, optional): Filter by section

Example: GET /api/analytics/performance/semester/Spring%202025/?lab_name=Lab2&section=14

Example Response:
{
    "semester": "Spring 2025",
    "lab_name": "Lab2",
    "section": "14",
    "total_sessions": 45,
    "total_points_lost": 180,
    "average_points_lost": 4.0,
    "lab_breakdown": [],
    "section_breakdown": [],
    "performance_summary": "Spring 2025 students demonstrate strong fundamentals in programming concepts. Most students excel in basic array operations but need additional practice with complex data structures and error handling."
}

3.8 GET STUDENT PERFORMANCE BY LAB (WITH PAGINATION)
---------------------------------------------------
URL: GET /api/analytics/performance/by-lab/
Description: Get student performance filtered by lab, section, and semester with pagination

Query Parameters:
- lab_name (string, optional): Filter by lab name
- section (string, optional): Filter by section
- semester (string, optional): Filter by semester
- page (integer, optional): Page number (default: 1, min: 1)
- page_size (integer, optional): Items per page (default: 20, min: 1, max: 100)

Example: GET /api/analytics/performance/by-lab/?lab_name=Lab2&section=14&page=1&page_size=10

Example Response:
{
    "performances": [
        {
            "student_id": "STU100001",
            "student_name": "Alex Johnson",
            "lab_name": "Lab2",
            "section": "14",
            "semester": "Spring 2025",
            "total_evaluations": 3,
            "total_points_lost": 15,
            "average_points_lost": 5.0,
            "last_evaluation_date": "2025-06-21T15:30:00Z"
        },
        {
            "student_id": "STU100002",
            "student_name": "Jordan Smith",
            "lab_name": "Lab2",
            "section": "14",
            "semester": "Spring 2025",
            "total_evaluations": 2,
            "total_points_lost": 8,
            "average_points_lost": 4.0,
            "last_evaluation_date": "2025-06-21T14:30:00Z"
        }
    ],
    "pagination": {
        "current_page": 1,
        "page_size": 10,
        "total_count": 45,
        "total_pages": 5,
        "has_next": true,
        "has_previous": false,
        "next_page": 2,
        "previous_page": null
    }
}

3.9 ANALYZE STUDENT PERFORMANCE
-------------------------------
URL: GET /api/analytics/performance/analysis/
Description: Get comprehensive performance analysis with concept-based summaries

Query Parameters:
- lab_name (string, optional): Filter by lab name
- section (string, optional): Filter by section
- semester (string, optional): Filter by semester
- start_date (string, optional): Start date for analysis (YYYY-MM-DD)
- end_date (string, optional): End date for analysis (YYYY-MM-DD)

Example: GET /api/analytics/performance/analysis/?lab_name=Lab2&section=14&start_date=2025-01-01&end_date=2025-06-21

Example Response:
{
    "analysis": {
        "total_students": 45,
        "total_evaluations": 135,
        "average_points_lost": 7.2,
        "concept_performance": {
            "array_operations": {
                "strength": "Students show excellent array manipulation skills",
                "weakness": "Many struggle with array boundary conditions",
                "improvement_needed": "Focus on array bounds checking and edge cases"
            },
            "loop_implementation": {
                "strength": "Good understanding of basic loop structures",
                "weakness": "Difficulty with nested loops and complex iterations",
                "improvement_needed": "Practice with multi-dimensional array processing"
            }
        },
        "performance_summary": "Students in section 14 demonstrate strong fundamentals in array operations but need improvement in handling edge cases and complex loop structures. Jordan shows particular promise in algorithm implementation while Taylor needs additional support with array boundary conditions."
    }
}

TOKEN LIMIT INFORMATION
-----------------------
All summarized performance endpoints include token limit checks:
- Maximum estimated tokens: 300 (leaves room for prompt, total 400 tokens)
- If exceeded: Returns "MAX_LIMIT_EXCEEDED: Too much data to analyze. Please use more specific filters."
- To avoid limits: Use more specific filters (lab + section + semester)
- Analysis focuses on core programming concepts, not specific lab topics

================================================================================
4. MONITORING AND ANALYTICS ENDPOINTS
================================================================================

4.1 GET EVALUATION STATISTICS
-----------------------------
URL: GET /api/evaluation/stats/
Description: Get evaluation statistics for the last N days

Query Parameters:
- days (integer, optional): Number of days to analyze (1-365, default: 30)

Example: GET /api/evaluation/stats/?days=7

Example Response:
{
    "status": "success",
    "message": "Retrieved evaluation statistics for last 7 days",
    "data": {
        "period_days": 7,
        "total_sessions": 45,
        "total_evaluations": 135,
        "total_tokens_used": 67500,
        "average_evaluation_time_seconds": 2.3,
        "success_rate": 98.5
    }
}

Example Error Response (Invalid Days):
{
    "status": "error",
    "message": "Invalid days parameter",
    "errors": ["Days must be between 1 and 365"],
    "missing_entities": ["valid_days_parameter"]
}

4.2 GET STUDENT PERFORMANCE
---------------------------
URL: GET /api/evaluation/performance/{student_id}/
Description: Get performance statistics for a specific student

Path Parameters:
- student_id (string): Student identifier (non-empty)

Example: GET /api/evaluation/performance/STU123456/

Example Success Response:
{
    "status": "success",
    "message": "Retrieved performance for student: STU123456",
    "data": {
        "student_id": "STU123456",
        "student_name": "John Doe",
        "total_evaluations": 15,
        "total_points_lost": 45,
        "average_points_lost": 3.0,
        "recent_evaluations": [
            {
                "filename": "main.py",
                "status": "success",
                "total_points_lost": 5,
                "created_at": "2025-06-21T15:30:00Z"
            }
        ]
    }
}

Example Error Response (Student Not Found):
{
    "status": "error",
    "message": "Student not found",
    "errors": ["Student not found"],
    "missing_entities": ["student"]
}

4.3 HEALTH CHECK
----------------
URL: GET /api/evaluation/health/
Description: Check system health and status

No required fields

Example Response:
{
    "status": "healthy",
    "database": "healthy",
    "openai_service": "healthy",
    "timestamp": "2025-06-21T15:52:48.832885+00:00"
}

Example Response (System Issues):
{
    "status": "degraded",
    "database": "healthy",
    "openai_service": "unhealthy",
    "timestamp": "2025-06-21T15:52:48.832885+00:00"
}

================================================================================
5. FEEDBACK AND EVALUATION FEATURES
================================================================================

5.1 ENHANCED FEEDBACK SUMMARIES
-------------------------------
The system now generates personalized feedback summaries that include:

- Random student names for personalization (Alex, Jordan, Taylor, Casey, Morgan, etc.)
- Topic-specific programming concept analysis
- Strengths and weaknesses based on lab content
- Actionable improvement suggestions

Example Feedback Summaries:
- "Alex performed well in Lab2, demonstrating excellent array manipulation skills. However, struggles with array boundary conditions. Overall good work with room for improvement."
- "Jordan shows promise in Lab3 with excellent function design and implementation. To excel, address recursive function implementation. Continue this good work."
- "Taylor has completed Lab4 with excellent class design and implementation. To improve further, focus on polymorphism implementation. Good effort overall."

5.2 PROGRAMMING CONCEPT COVERAGE
--------------------------------
The system covers 10 diverse programming topics:

1. Basic Variables and Input/Output (Lab1)
   - Variable declaration and initialization
   - Input handling and validation
   - Basic calculations and output formatting

2. Arrays and Lists (Lab2)
   - Array initialization and operations
   - Loop implementation and indexing
   - Search and sorting algorithms
   - Multi-dimensional arrays

3. Functions and Methods (Lab3)
   - Function definition and calls
   - Parameter handling and return values
   - Recursive functions and documentation

4. Object-Oriented Programming (Lab4)
   - Class definition and constructors
   - Inheritance and polymorphism
   - Method implementation and encapsulation

5. File Handling and I/O (Lab5)
   - File reading and writing
   - CSV processing and data parsing
   - Error handling for file operations

6. Data Structures (Lab6)
   - Stack and queue implementation
   - Linked lists and tree structures
   - Traversal algorithms

7. Graph Algorithms (Lab7)
   - Graph representation and traversal
   - Shortest path algorithms
   - Minimum spanning tree implementation

8. Dynamic Programming (Lab8)
   - Memoization and recursive solutions
   - State management and optimization
   - Complex DP problem solving

9. Advanced Algorithms (Lab9)
   - Sorting and searching algorithms
   - Divide and conquer techniques
   - Greedy algorithms and backtracking

10. System Programming (Lab10)
    - Process and thread management
    - Network and socket programming
    - Synchronization mechanisms

================================================================================
6. VALIDATION RULES AND CONSTRAINTS
================================================================================

6.1 STUDENT DATA VALIDATION
---------------------------
- student_id: 3-20 characters, alphanumeric with hyphens/underscores only
- name: 2-100 characters, letters, spaces, dots, hyphens, apostrophes only
- section: 1-10 alphanumeric characters
- term: Must match pattern "Spring|Summer|Fall|Winter" + space + 4-digit year
- instructor_name: 2-100 characters, letters, spaces, dots, hyphens, apostrophes only

6.2 RUBRIC DATA VALIDATION
--------------------------
- name: Non-empty string
- filename: Must end with .py, alphanumeric with hyphens/underscores/dots
- total_points: Positive integer
- criteria: Dictionary with nested structure containing points and descriptions

6.3 EVALUATION REQUEST VALIDATION
---------------------------------
- lab_name: 1-50 characters, alphanumeric, spaces, hyphens, underscores only
- input: 10-50,000 characters, must contain "Download" keyword and ".py" files
- All student data fields must be present and valid

6.4 CODE CONTENT VALIDATION
---------------------------
- Filenames must end with .py
- Code content must be at least 3 lines
- Must contain basic Python syntax indicators (def, class, import, etc.)
- No empty files allowed

6.5 PAGINATION VALIDATION
-------------------------
- page: Must be >= 1 (default: 1)
- page_size: Must be between 1 and 100 (default varies by endpoint)
- Invalid values are automatically corrected to defaults

================================================================================
7. ERROR RESPONSE FORMATS
================================================================================

7.1 MISSING FIELDS ERROR
------------------------
{
    "status": "error",
    "message": "Missing required fields",
    "errors": ["Missing required field: field_name"],
    "missing_entities": ["field_name"]
}

7.2 VALIDATION ERROR
--------------------
{
    "status": "error",
    "message": "Validation failed",
    "errors": ["Specific validation error message"],
    "field": "field_name"
}

7.3 NOT FOUND ERROR
-------------------
{
    "status": "error",
    "message": "Resource not found",
    "errors": ["Specific not found message"],
    "missing_entities": ["resource_type"]
}

7.4 INTERNAL SERVER ERROR
-------------------------
{
    "status": "error",
    "message": "Internal server error",
    "errors": ["An unexpected error occurred"]
}

================================================================================
8. AUTHENTICATION AND PERMISSIONS
================================================================================

All endpoints currently use @permission_classes([AllowAny]) for development.
In production, implement proper authentication and authorization.

================================================================================
9. LOGGING AND MONITORING
================================================================================

All API calls are logged with:
- Request details (method, URL, parameters)
- Validation results
- Processing time
- Error details (if any)
- Token usage (for OpenAI calls)

Log files are stored in:
- logs/code_grader.log (main application log)
- logs/errors.log (error-only log)

================================================================================
10. TESTING ENDPOINTS
================================================================================

10.1 VALIDATION TEST SCRIPT
---------------------------
Run: python scripts/test_validation.py

This script tests:
- Student data validation
- Rubric data validation
- Evaluation request validation
- Code content validation
- Input sanitization
- Error response formats
- Logging levels

10.2 DATABASE POPULATION SCRIPT
------------------------------
Run: python populate_database.py

This script creates:
- 10 diverse rubrics covering different programming topics
- 1200+ students across different semesters and sections
- Realistic evaluations with personalized feedback
- Comprehensive metrics and analytics data

================================================================================
11. EXAMPLE USAGE WITH CURL
================================================================================

11.1 Evaluate Submission:
curl -X POST http://localhost:8000/api/evaluation/evaluate/ \
  -H "Content-Type: application/json" \
  -d '{
    "student_id": "STU123456",
    "name": "John Doe",
    "section": "CS101",
    "term": "Spring 2025",
    "instructor_name": "Dr. Smith",
    "lab_name": "Lab 1",
    "input": "Download main.py\nprint(\"Hello World\")"
  }'

11.2 Get All Labs:
curl -X GET "http://localhost:8000/api/analytics/labs/"

11.3 Get Lab by ID:
curl -X GET "http://localhost:8000/api/analytics/lab/1/"

11.4 Get Rubrics with Pagination:
curl -X GET "http://localhost:8000/api/evaluation/rubrics/?page=1&page_size=5"

11.5 Get Students with Pagination:
curl -X GET "http://localhost:8000/api/analytics/students/?page=1&page_size=10"

11.6 Get Student Performance Summary:
curl -X GET "http://localhost:8000/api/analytics/student/STU100001/performance/"

11.7 Get Lab Performance Summary:
curl -X GET "http://localhost:8000/api/analytics/performance/lab/Lab2/?section=14&semester=Spring%202025"

11.8 Get Section Performance Summary:
curl -X GET "http://localhost:8000/api/analytics/performance/section/14/?lab_name=Lab2&semester=Spring%202025"

11.9 Get Semester Performance Summary:
curl -X GET "http://localhost:8000/api/analytics/performance/semester/Spring%202025/?lab_name=Lab2&section=14"

11.10 Get Performance by Lab with Pagination:
curl -X GET "http://localhost:8000/api/analytics/performance/by-lab/?lab_name=Lab2&section=14&page=1&page_size=10"

11.11 Create Rubric:
curl -X POST http://localhost:8000/api/evaluation/rubrics/create/ \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Python Basics",
    "filename": "main.py",
    "total_points": 100,
    "criteria": {
      "syntax": {"points": 20, "description": "Correct syntax"},
      "logic": {"points": 30, "description": "Correct logic"}
    }
  }'

11.12 Get Statistics:
curl -X GET "http://localhost:8000/api/evaluation/stats/?days=7"

11.13 Health Check:
curl -X GET http://localhost:8000/api/evaluation/health/

================================================================================
12. DEPLOYMENT NOTES
================================================================================

1. Set up environment variables:
   - OPENAI_API_KEY
   - DJANGO_SECRET_KEY
   - DATABASE_URL (if using external database)

2. Run migrations:
   python manage.py migrate

3. Load initial rubrics:
   python manage.py load_rubrics

4. Populate database with test data:
   python populate_database.py

5. Start server:
   python manage.py runserver

6. Monitor logs:
   tail -f logs/code_grader.log
   tail -f logs/errors.log

================================================================================
13. ERROR HANDLING AND 404 PROTECTION
================================================================================

13.1 CUSTOM ERROR HANDLERS
--------------------------
The system includes custom error handlers that provide JSON responses for better API integration:

13.1.1 404 Not Found Handler
----------------------------
- **Triggered**: When accessing non-existent endpoints
- **Response Format**: JSON with helpful information
- **Features**:
  - Logs the 404 request for monitoring
  - Provides available endpoints list
  - Includes suggestions for troubleshooting
  - Different responses for API vs non-API requests

Example 404 Response (API endpoint):
{
    "error": "Endpoint not found",
    "message": "The requested endpoint '/api/nonexistent-endpoint/' does not exist",
    "status": "404",
    "available_endpoints": {
        "evaluation": "/api/evaluation/",
        "analytics": "/api/analytics/",
        "metrics": "/api/metrics/",
        "admin": "/admin/"
    },
    "suggestions": [
        "Check the URL spelling",
        "Verify the endpoint exists in the API documentation",
        "Ensure you're using the correct HTTP method",
        "Check if the endpoint requires authentication"
    ]
}

Example 404 Response (Non-API endpoint):
{
    "error": "Page not found",
    "message": "The requested page '/nonexistent-page/' does not exist",
    "status": "404"
}

13.1.2 500 Internal Server Error Handler
----------------------------------------
- **Triggered**: When server encounters unexpected errors
- **Response Format**: JSON with error details
- **Features**:
  - Logs the error with full details
  - Provides request ID for tracking
  - Safe error message (no sensitive data)

Example 500 Response:
{
    "error": "Internal server error",
    "message": "An unexpected error occurred on the server",
    "status": "500",
    "request_id": "req_12345"
}

13.1.3 400 Bad Request Handler
------------------------------
- **Triggered**: When request has invalid syntax or format
- **Response Format**: JSON with validation details
- **Features**:
  - Logs the bad request
  - Provides specific error details
  - Helps with request debugging

Example 400 Response:
{
    "error": "Bad request",
    "message": "The request could not be processed due to invalid syntax",
    "status": "400",
    "details": "Invalid JSON format"
}

13.1.4 403 Forbidden Handler
----------------------------
- **Triggered**: When access is denied
- **Response Format**: JSON with permission details
- **Features**:
  - Logs the forbidden access attempt
  - Clear permission denial message

Example 403 Response:
{
    "error": "Forbidden",
    "message": "You don't have permission to access this resource",
    "status": "403"
}

13.2 ERROR HANDLER CONFIGURATION
--------------------------------
Custom error handlers are configured in settings.py:
```python
HANDLER404 = 'code_grader_api.views.custom_404_handler'
HANDLER500 = 'code_grader_api.views.custom_500_handler'
HANDLER400 = 'code_grader_api.views.custom_400_handler'
HANDLER403 = 'code_grader_api.views.custom_403_handler'
```

13.3 DEBUG MODE CONSIDERATIONS
------------------------------
- **DEBUG = True**: Django shows detailed error pages (development)
- **DEBUG = False**: Custom error handlers are used (production)
- **Recommendation**: Set DEBUG = False in production for custom error handling

13.4 LOGGING OF ERRORS
----------------------
All error handlers include comprehensive logging:
- **404 errors**: Logged as WARNING level
- **500 errors**: Logged as ERROR level with full exception details
- **400/403 errors**: Logged as WARNING level
- **Log files**: All errors are written to logs/errors.log
- **User agent**: Included in logs for debugging

13.5 TESTING ERROR HANDLERS
---------------------------
To test custom error handlers:
1. Set DEBUG = False in settings.py
2. Restart the Django server
3. Access non-existent endpoints
4. Check logs/errors.log for error entries

Example test commands:
```bash
# Test 404 handler (with DEBUG = False)
curl -X GET "http://localhost:8000/api/nonexistent-endpoint/"

# Test 400 handler
curl -X POST "http://localhost:8000/api/evaluation/evaluate/" \
  -H "Content-Type: application/json" \
  -d 'invalid json'

# Check error logs
tail -f logs/errors.log
```

================================================================================
END OF DOCUMENTATION
================================================================================ 